//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Trader_ping_args = function(args) {
};
Trader_ping_args.prototype = {};
Trader_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Trader_ping_args.prototype.write = function(output) {
  output.writeStructBegin('Trader_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Trader_ping_result = function(args) {
};
Trader_ping_result.prototype = {};
Trader_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Trader_ping_result.prototype.write = function(output) {
  output.writeStructBegin('Trader_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Trader_check_args = function(args) {
  this.contract = null;
  this.ordertype = null;
  if (args) {
    if (args.contract !== undefined && args.contract !== null) {
      this.contract = args.contract;
    }
    if (args.ordertype !== undefined && args.ordertype !== null) {
      this.ordertype = args.ordertype;
    }
  }
};
Trader_check_args.prototype = {};
Trader_check_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contract = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ordertype = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Trader_check_args.prototype.write = function(output) {
  output.writeStructBegin('Trader_check_args');
  if (this.contract !== null && this.contract !== undefined) {
    output.writeFieldBegin('contract', Thrift.Type.STRING, 1);
    output.writeString(this.contract);
    output.writeFieldEnd();
  }
  if (this.ordertype !== null && this.ordertype !== undefined) {
    output.writeFieldBegin('ordertype', Thrift.Type.STRING, 2);
    output.writeString(this.ordertype);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Trader_check_result = function(args) {
};
Trader_check_result.prototype = {};
Trader_check_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Trader_check_result.prototype.write = function(output) {
  output.writeStructBegin('Trader_check_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TraderClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
TraderClient.prototype = {};
TraderClient.prototype.ping = function(callback) {
  this.send_ping(callback); 
  if (!callback) {
  this.recv_ping();
  }
};

TraderClient.prototype.send_ping = function(callback) {
  this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new Trader_ping_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_ping();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TraderClient.prototype.recv_ping = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Trader_ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
TraderClient.prototype.check = function(contract, ordertype, callback) {
  this.send_check(contract, ordertype, callback); 
  if (!callback) {
  this.recv_check();
  }
};

TraderClient.prototype.send_check = function(contract, ordertype, callback) {
  this.output.writeMessageBegin('check', Thrift.MessageType.CALL, this.seqid);
  var args = new Trader_check_args();
  args.contract = contract;
  args.ordertype = ordertype;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_check();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TraderClient.prototype.recv_check = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Trader_check_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
